version: '3'
services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
      platforms:
        - "linux/amd64"
      args:
        - BUILDKIT_INLINE_CACHE=1
        - GIT_COMMIT=${GIT_COMMIT:-latest}
      cache_from:
        - app:latest
    ports:
      - "80:3000"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
      guide_design:
        condition: service_started
    env_file:
      - .env
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - DB_HOST=db
    restart: unless-stopped

  guide_design:
    build:
      context: ..
      dockerfile: server/services/guide_design/Dockerfile
      platforms:
        - "linux/amd64"
      args:
        - BUILDKIT_INLINE_CACHE=1
        - GIT_COMMIT=${GIT_COMMIT:-latest}
      cache_from:
        - guide_design:latest
    volumes:
      - ../pt_guide_design:/app/packages/pt_guide_design:ro
      - ../sgrna_scorer:/app/packages/sgrna_scorer:ro
      - ../sgrna_scorer/resources:/app/packages/sgrna_scorer/resources:ro
    environment:
      - PYTHONPATH=/app/packages:${PYTHONPATH}
      - GENOME_PATH=/app/packages/pt_guide_design/resources/Phaeodactylum_tricornutum.ASM15095v2.dna.toplevel.fa
      - MODEL_PATH=/app/packages/sgrna_scorer/resources/model.weights.h5
    depends_on:
      redis:
        condition: service_started
    env_file:
      - .env
    deploy:
      resources:
        limits:
          cpus: "1.0"
          memory: "4G"
        reservations:
          cpus: "0.5"
          memory: "2G"

  db:
    image: postgres:latest
    platform: linux/amd64
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db:/docker-entrypoint-initdb.d
    env_file:
      - .env
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 30s
    restart: unless-stopped

  redis:
    image: "redis:latest"
    platform: linux/amd64
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: unless-stopped

volumes:
  postgres_data:
